//Sidebar.jsx


import { useState } from 'react';
import { usePropertyMap } from '../../contexts/PropertyMapContext';
import PropertyCard from '../property/PropertyCard';
import FilterPanel from '../filters/FilterPanel';

/**
 * Sidebar component containing property listings and filter panel
 */
const Sidebar = () => {
  const { 
    searchResults, 
    handlePropertySelect, 
    propertyDetails, 
    uiState, 
    togglePanel,
    filterCount
  } = usePropertyMap();
  
  const [sortOption, setSortOption] = useState('featured');

  // Handle sorting
  const sortProperties = (properties) => {
    if (!properties) return [];

    switch (sortOption) {
      case 'price-asc':
        return [...properties].sort((a, b) => a.priceRange.min - b.priceRange.min);
      case 'price-desc':
        return [...properties].sort((a, b) => b.priceRange.min - a.priceRange.min);
      case 'newest':
        return [...properties].sort((a, b) => {
          const dateA = a.completionDate ? new Date(a.completionDate) : new Date();
          const dateB = b.completionDate ? new Date(b.completionDate) : new Date();
          return dateA - dateB;
        });
      case 'featured':
      default:
        return properties;
    }
  };

  // Sort properties
  const sortedProperties = sortProperties(searchResults?.properties || []);

  return (
    <div className="flex flex-col h-full border-r bg-white">
      {/* Sidebar Header */}
      <div className="p-4 border-b flex justify-between items-center">
        <div className="text-lg font-medium">
          {searchResults?.total || 0} Properties
        </div>
        
        <div className="flex space-x-2">
          {/* Filter Toggle */}
          <button
            onClick={() => togglePanel('filterPanelOpen')}
            className={`px-3 py-1 rounded-md text-sm flex items-center ${
              uiState.filterPanelOpen ? 'bg-blue-600 text-white' : 'bg-blue-50 text-blue-600 hover:bg-blue-100'
            }`}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
            </svg>
            Filters
            {filterCount > 0 && (
              <span className="ml-1 bg-white text-blue-600 rounded-full w-5 h-5 flex items-center justify-center text-xs">
                {filterCount}
              </span>
            )}
          </button>
          
          {/* Sort Dropdown */}
          <div className="relative">
            <select
              className="block w-full pl-3 pr-10 py-1 border border-gray-300 rounded-md bg-white focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-sm"
              value={sortOption}
              onChange={(e) => setSortOption(e.target.value)}
            >
              <option value="featured">Featured</option>
              <option value="price-asc">Price: Low to High</option>
              <option value="price-desc">Price: High to Low</option>
              <option value="newest">Newest</option>
            </select>
          </div>
        </div>
      </div>
      
      {/* Filter Panel (conditionally rendered) */}
      {uiState.filterPanelOpen && (
        <div className="border-b">
          <FilterPanel />
        </div>
      )}
      
      {/* Property List */}
      <div className="flex-grow overflow-y-auto p-4">
        {sortedProperties.length === 0 ? (
          <div className="flex flex-col items-center justify-center text-center py-8 text-gray-500">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
            </svg>
            <h3 className="text-lg font-medium">No properties found</h3>
            <p className="mt-1">Try adjusting your filters or search for a different area.</p>
          </div>
        ) : (
          sortedProperties.map((property) => (
            <PropertyCard
              key={property.id}
              property={property}
              onClick={handlePropertySelect}
              isSelected={propertyDetails?.id === property.id}
            />
          ))
        )}
      </div>
    </div>
  );
};

export default Sidebar;